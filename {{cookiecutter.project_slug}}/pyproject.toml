{% import "context.j2" as ctx with context -%}

{% set license_classifiers = {
    "MIT": "License :: OSI Approved :: MIT License",
    "BSD-3-Clause": "License :: OSI Approved :: BSD License",
    "ISC": "License :: OSI Approved :: ISC License (ISCL)",
    "Apache-2.0": "License :: OSI Approved :: Apache Software License",
    "GPL-3.0-only": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
} -%}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool]
[tool.poetry]
name = "{{ ctx.package_name }}"
version = "{{ ctx.project_version }}"
description = "{{ ctx.project_short_description }}."
authors = ["{{ ctx.author_name.replace('\"', '\\\"') }} <{{ ctx.author_email }}>"]
readme = "README.md"
homepage = "{{ ctx.document_url }}"
documentation = "{{ ctx.document_url }}"
repository = "{{ ctx.project_url }}"
{% if ctx.open_source_license in license_classifiers -%}
license =  "{{ ctx.open_source_license }}"
{% endif -%}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
{%- if ctx.open_source_license in license_classifiers +%}
    "{{ license_classifiers[ctx.open_source_license] }}",
{%- endif +%}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
packages = [
    { include = "{{ ctx.package_name }}", from = "src" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
{% if ctx.use_click -%}
click = "^8.0.4"
{% elif ctx.use_typer -%}
click = "^8.0.4"
typer = "^0.4.0"
{% endif -%}
{% if ctx.use_attrs -%}
attrs = "^21.4.0"
cattrs = "^1.10.0"
{% endif -%}
{% if ctx.use_pydantic -%}
pydantic = "^1.9.0"
{%- endif %}
[tool.poetry.extras]

[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
pytest = "^6.2.4"
pytest-cov = "^2.12.0"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
black = "^21.5b2"
isort = "^5.8.0"
{% if ctx.use_mypy -%}
mypy = "^0.900"
{% endif -%}
autoflake = "^1.4"
flake8 = "^3.9.2"
flake8-docstrings = "^1.6.0"
pipx = "^1.0.0"
pre-commit = "^2.17.0"
bump2version = "^1.0.1"

[tool.poetry.group.doc]
optional = true
[tool.poetry.group.doc.dependencies]
{%- if ctx.use_sphinx %}
Sphinx = "^4.4.0"
furo = "^2022.2.14.1"
autodoc-pydantic = "^1.6.1"
sphinxcontrib-programoutput = "^0.17"
sphinx-copybutton = "^0.5.0"
sphinx-click = "^3.1.0"
urllib3 = "^1.26.8"
charset-normalizer = "^2.0.12"
certifi = "^2021.10.8"
idna = "^3.3"
{%- elif ctx.use_mkdocs %}
mkdocs = "^1.1.2"
mkdocs-include-markdown-plugin ="^1.0.0"
mkdocs-material = "^6.1.7"
mkdocstrings = "^0.15.2"
mkdocs-material-extensions = "^1.0.1"
mkdocs-autorefs = "^0.2.1"
{%- endif %}

# 为减少依赖递归分析时间，在此列出常用依赖
[tool.poetry.group.common]
optional = true
[tool.poetry.group.common.dependencies]
numpy = "^1.22.3"
typing-extensions = "^4.1.1"

{% if ctx.use_pypi_mirror -%}
[[tool.poetry.source]]
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple/"
default = true
{%- endif %}

{% if ctx.is_cli -%}
[tool.poetry.scripts]
{{ ctx.project_slug }} = "{{ ctx.package_name }}.cli:main"
{%- endif %}

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py38", "py39", "py310"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
# you can skip files as below
#skip_glob = docs/conf.py


[tool.mypy]
python_version = "3.8"
mypy_path = "src"
show_column_numbers = true
follow_imports = "normal"     # show error messages from unrelated files
ignore_missing_imports = true # suppress errors about unsatisfied imports

# be strict
disallow_untyped_calls = true
warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
disallow_any_generics = true
# Unreachable blocks have been an issue when compiling mypyc, let's try
# to avoid 'em in the first place.
warn_unreachable = true

# The following are off by default.  Flip them on if you feel
# adventurous.
disallow_untyped_defs = true
check_untyped_defs = true

# No incremental mode
cache_dir = "/dev/null"
# exclude = [
#     '^file1\.py$',  # TOML literal string (single-quotes, no escaping necessary)
#     "^file2\\.py$", # TOML basic string (double-quotes, backslash and other characters need escaping)
# ]
