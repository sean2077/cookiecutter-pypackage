{% import "context.j2" as ctx with context -%}

{% set license_classifiers = {
    "MIT": "License :: OSI Approved :: MIT License",
    "BSD-3-Clause": "License :: OSI Approved :: BSD License",
    "ISC": "License :: OSI Approved :: ISC License (ISCL)",
    "Apache-2.0": "License :: OSI Approved :: Apache Software License",
    "GPL-3.0-only": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
} -%}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool]
[tool.poetry]
name = "{{ ctx.package_name }}"
version = "{{ ctx.project_version }}"
description = "{{ ctx.project_short_description }}."
authors = ["{{ ctx.author_name.replace('\"', '\\\"') }} <{{ ctx.author_email }}>"]
readme = "README.md"
documentation = "{{ ctx.document_url }}"
repository = "{{ ctx.project_url }}"
{% if ctx.open_source_license in license_classifiers -%}
license =  "{{ ctx.open_source_license }}"
{% endif -%}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
{%- if ctx.open_source_license in license_classifiers +%}
    "{{ license_classifiers[ctx.open_source_license] }}",
{%- endif +%}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
packages = [
    { include = "{{ ctx.package_name }}", from = "src" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
{% if ctx.use_click -%}
click = "^8.0.4"
{% elif ctx.use_typer -%}
typer = "^0.4.0"
{% endif -%}
{% if ctx.use_attrs -%}
attrs = "^21.4.0"
cattrs = "^1.10.0"
{% endif -%}
{% if ctx.use_pydantic -%}
pydantic = "^1.9.0"
{% endif -%}

[tool.poetry.dev-dependencies]
# for tests
pytest = { version = "^6.2.4", optional = true }
pytest-cov = { version = "^2.12.0", optional = true }
# for code style
black = { version = "^21.5b2", optional = true }
isort = { version = "^5.8.0", optional = true }
{% if ctx.use_mypy -%}
mypy = { version = "^0.900", optional = true }
{% endif -%}
autoflake = { version = "^1.4", optional = true }
flake8 = { version = "^3.9.2", optional = true }
flake8-docstrings = { version = "^1.6.0", optional = true }
# for documents
{% if ctx.use_sphinx -%}
Sphinx = { version = "^4.4.0", optional = true }
furo = { version = "^2022.2.14.1", optional = true }
autodoc-pydantic = { version = "^1.6.1", optional = true }
sphinxcontrib-programoutput = { version = "^0.17", optional = true }
sphinx-copybutton = { version = "^0.5.0", optional = true }
{% elif ctx.use_mkdocs -%}
mkdocs = { version = "^1.1.2", optional = true }
mkdocs-include-markdown-plugin = { version = "^1.0.0", optional = true }
mkdocs-material = { version = "^6.1.7", optional = true }
mkdocstrings = { version = "^0.15.2", optional = true }
mkdocs-material-extensions = { version = "^1.0.1", optional = true }
mkdocs-autorefs = { version = "^0.2.1", optional = true }
{% endif -%}
# others
pipx = { version = "^1.0.0", optional = true }
pre-commit = { version = "^2.17.0", optional = true }
bump2version = { version = "^1.0.1", optional = true }

[tool.poetry.extras]
test = ["pytest", "pytest-cov"]

dev = [
    "pipx",
    "pre-commit",
    "bump2version",
    "black",
    "isort",
    "autoflake",
    "flake8",
    "flake8-docstrings",
{%- if ctx.use_mypy +%}
    "mypy",
{% endif -%}
]

doc = [
{%- if ctx.use_sphinx +%}
    "Sphinx",
    "furo",
    "autodoc-pydantic",
    "sphinxcontrib-programoutput",
    "sphinx-copybutton",
    "sphinx-click",
{%- elif ctx.use_mkdocs +%}
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extension",
    "mkdocs-autorefs",
{% endif -%}
]

{% if ctx.is_cli -%}
[tool.poetry.scripts]
{{ ctx.package_name }} = "{{ ctx.package_name }}.cli:main"
{%- endif %}

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py38", "py39", "py310"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
# you can skip files as below
#skip_glob = docs/conf.py
